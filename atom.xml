<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Call Me Sensei</title>
  
  <subtitle>A curious boy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lavidal.github.io/"/>
  <updated>2023-02-21T07:48:09.414Z</updated>
  <id>https://lavidal.github.io/</id>
  
  <author>
    <name>Enze Long</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sleep Science of Mine</title>
    <link href="https://lavidal.github.io/2023/02/20/Sleep-Science-of-Mine/"/>
    <id>https://lavidal.github.io/2023/02/20/Sleep-Science-of-Mine/</id>
    <published>2023-02-21T07:33:54.000Z</published>
    <updated>2023-02-21T07:48:09.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客观准备"><a href="#客观准备" class="headerlink" title="客观准备"></a>客观准备</h1><ul><li>首先是环境因素: 温度和光强，温度控制在72、73华氏度，光的话尽量全黑。</li><li>Bedroom Setup: 被子需要和外界温度适应，如果低于5度我会加一个薄被子在脚上。枕头，非常重要，我尝试过所谓很好的枕头，但是不适合，我发现的原因是我那一周的睡眠质量下降了很多。比较适合软硬始终，偏软一点点，蓬松那一类型的被子。</li><li>睡前准备: 90分钟法则，也即睡前九十分钟不从事会让人激动兴奋的活动。其二，保持自己的睡前routine，吃好维生素片，写日记，看书，然后一有困意就睡觉。</li><li>用睡眠app去监控我的睡眠，这样就可以用数据衡量自己的睡眠质量而非“感觉”。</li></ul><h1 id="主观认知"><a href="#主观认知" class="headerlink" title="主观认知"></a>主观认知</h1><p>我曾经对于睡眠很不自信，然后会担心睡眠影响我的performance，这种想法造成了许多焦虑和压力反而让睡眠更差，这时候回到监测那一点，这就是工具能带来的，客观认识自己的睡眠质量。</p><p>所以，睡眠对于performance重要，但也没那么重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;客观准备&quot;&gt;&lt;a href=&quot;#客观准备&quot; class=&quot;headerlink&quot; title=&quot;客观准备&quot;&gt;&lt;/a&gt;客观准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;首先是环境因素: 温度和光强，温度控制在72、73华氏度，光的话尽量全黑。&lt;/li&gt;
&lt;li&gt;Bedroom S
      
    
    </summary>
    
    
      <category term="Self Care" scheme="https://lavidal.github.io/categories/Self-Care/"/>
    
    
      <category term="Self Care" scheme="https://lavidal.github.io/tags/Self-Care/"/>
    
  </entry>
  
  <entry>
    <title>Review of Alice in Borderland</title>
    <link href="https://lavidal.github.io/2023/01/08/Review-of-Alice-in-Borderland/"/>
    <id>https://lavidal.github.io/2023/01/08/Review-of-Alice-in-Borderland/</id>
    <published>2023-01-09T01:11:29.000Z</published>
    <updated>2023-01-09T01:17:37.230Z</updated>
    
    <content type="html"><![CDATA[<p>弥留之国的爱丽丝刷完了，最后一集四倍速看的，四倍速真是刷剧的一剂良药，能够捕捉到一切信息又能节省大量时间。</p><p>关于这个国度的悬念终于揭晓了，弥留之际的梦境真是一种偷懒取巧的做法啊。但故事铺陈堆叠到现在，也想不到更好的解法了。梦境真是万能。</p><p>但弥留之际的梦境的确讲得通，这些玩家在游戏中反反复复的询问活着的理由，人生的意义，自己的理想，而只有那些有答案的或是说有执念的活了下来。</p><p>总的来说，大团圆结局俗套，但在这部剧弥留之国很合适。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;弥留之国的爱丽丝刷完了，最后一集四倍速看的，四倍速真是刷剧的一剂良药，能够捕捉到一切信息又能节省大量时间。&lt;/p&gt;
&lt;p&gt;关于这个国度的悬念终于揭晓了，弥留之际的梦境真是一种偷懒取巧的做法啊。但故事铺陈堆叠到现在，也想不到更好的解法了。梦境真是万能。&lt;/p&gt;
&lt;p&gt;但弥留之
      
    
    </summary>
    
    
      <category term="Video Works Reviews" scheme="https://lavidal.github.io/categories/Video-Works-Reviews/"/>
    
    
      <category term="Video Works Reviews" scheme="https://lavidal.github.io/tags/Video-Works-Reviews/"/>
    
  </entry>
  
  <entry>
    <title>我对事物的一些理解（持续更新）</title>
    <link href="https://lavidal.github.io/2023/01/08/%E6%88%91%E5%AF%B9%E4%BA%8B%E7%89%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>https://lavidal.github.io/2023/01/08/%E6%88%91%E5%AF%B9%E4%BA%8B%E7%89%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</id>
    <published>2023-01-08T21:59:59.000Z</published>
    <updated>2023-01-08T23:46:15.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观世界"><a href="#观世界" class="headerlink" title="观世界"></a>观世界</h1><p>世界是以一种严格的理性运行的，其中掺杂许多不同元素：善恶，是非，情绪，感性等等等等，但本质，是一种严格的理性。</p><p>世界的底色是理性，但不代表无趣，其理性含有对真善美的支持，对智慧的推崇，对灵魂的关怀，对恶的存在的必要，善恶是非的无限变化。</p><h2 id="我对于世界观的思维模式"><a href="#我对于世界观的思维模式" class="headerlink" title="我对于世界观的思维模式"></a>我对于世界观的思维模式</h2><p>是一种自适应模式，adaptive。基于过去经历，此时境遇来得出客观结论，达到与现实和自我的平衡。</p><h1 id="主义"><a href="#主义" class="headerlink" title="主义"></a>主义</h1><p>基于唯物主义的唯心主义。但两种融合的话怎么叫“唯”呢，一半一半，半殖民地半封建（不是。</p><h1 id="我是个怎样的人"><a href="#我是个怎样的人" class="headerlink" title="我是个怎样的人"></a>我是个怎样的人</h1><p>我是个认准一件事情后，会反复去努力的人，一直重复。喜欢的菜，餐馆，音乐，都会在一段时间反复的光顾。不过最近也在领悟给自己生活加入新元素新想法的道理。</p><p>情感比较充沛。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;观世界&quot;&gt;&lt;a href=&quot;#观世界&quot; class=&quot;headerlink&quot; title=&quot;观世界&quot;&gt;&lt;/a&gt;观世界&lt;/h1&gt;&lt;p&gt;世界是以一种严格的理性运行的，其中掺杂许多不同元素：善恶，是非，情绪，感性等等等等，但本质，是一种严格的理性。&lt;/p&gt;
&lt;p&gt;世界的
      
    
    </summary>
    
    
      <category term="Philosophy" scheme="https://lavidal.github.io/categories/Philosophy/"/>
    
    
      <category term="Philosophy" scheme="https://lavidal.github.io/tags/Philosophy/"/>
    
  </entry>
  
  <entry>
    <title>Database Sys Lec2 Intermediate SQL</title>
    <link href="https://lavidal.github.io/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/"/>
    <id>https://lavidal.github.io/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/</id>
    <published>2021-01-21T22:09:02.000Z</published>
    <updated>2021-01-21T23:56:44.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lecture-2-Intermediate-SQL"><a href="#Lecture-2-Intermediate-SQL" class="headerlink" title="Lecture #2: Intermediate SQL"></a>Lecture #2: Intermediate SQL</h1><h2 id="RELATIONAL-LANGUAGES"><a href="#RELATIONAL-LANGUAGES" class="headerlink" title="RELATIONAL LANGUAGES"></a>RELATIONAL LANGUAGES</h2><p>User only needs to <strong>specify the answer that they want</strong>, not how to compute it. </p><p>The DBMS is responsible for <strong>efficient evaluation of the query</strong>. </p><p>→ High-end systems have a <strong>sophisticated query optimizer</strong> that can <strong>rewrite queries and search for optimal execution strategies</strong>.</p><ul><li>Data Manipulation Language (DML) </li><li>Data Definition Language (DDL) </li><li>Data Control Language (DCL)</li></ul><p>Also includes: </p><p>→ View definition </p><p>→ Integrity &amp; Referential Constraints </p><p>→ Transactions</p><p>Important: SQL is based on <strong>bags (duplicates)</strong> not <strong>sets (no duplicates)</strong>.</p><h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><ul><li>Aggregations + Group By </li><li>String / Date / Time Operations </li><li>Output Control + Redirection </li><li>Nested Queries </li><li>Common Table Expressions </li><li>Window Functions</li></ul><h2 id="Aggregates"><a href="#Aggregates" class="headerlink" title="Aggregates"></a>Aggregates</h2><p>Functions that return a single value from a bag of tuples: </p><p>→ AVG(col)→ Return the average col value. </p><p>→ MIN(col)→ Return minimum col value. </p><p>→ MAX(col)→ Return maximum col value. </p><p>→ SUM(col)→ Return sum of values in col. </p><p>→ COUNT(col)→ Return # of values for col.</p><p><strong>Aggregate functions</strong> can (almost) only be used in the <strong>SELECT output list</strong>.</p><img src="/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/Aggregates_1.png" class=""><p><strong>DISTINCT</strong> <strong>AGGREGATES</strong>: COUNT, SUM, AVG support DISTINCT</p><img src="/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/Aggregates_2.png" class=""><p>Output of <strong>other columns outside of an aggregate is undefined</strong>.</p><img src="/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/Aggregates_3.png" class=""><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a><strong>GROUP BY</strong></h2><p><strong>Project tuples into subsets</strong> and <strong>calculate aggregates</strong> against each subset.</p><p><strong>Non-aggregated values</strong> in <strong>SELECT output clause</strong> must appear in <strong>GROUP BY clause</strong>.</p><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><p><strong>Filters</strong> results based on aggregation computation. Like a <strong>WHERE</strong> clause for a <strong>GROUP BY</strong></p><img src="/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/Having_1.png" class=""><h2 id="STRING-OPERATIONS"><a href="#STRING-OPERATIONS" class="headerlink" title="STRING OPERATIONS"></a>STRING OPERATIONS</h2><p><strong>LIKE</strong> is used for string matching. </p><p>String-matching operators </p><p>→<strong>‘%’ Matches any substring (including empty strings).</strong> </p><p>→<strong>‘_’ Match any one character</strong></p><p>SQL-92 defines string functions. </p><p>→ Many DBMSs also have their own unique functions </p><p>Can be used in either output and predicates</p><p>SQL standard says to use <strong>||</strong> operator to <strong>concatenate two or more strings together</strong>.</p><h2 id="DATE-TIME-OPERATIONS"><a href="#DATE-TIME-OPERATIONS" class="headerlink" title="DATE/TIME OPERATIONS"></a>DATE/TIME OPERATIONS</h2><p>Operations to manipulate and modify <strong>DATE/TIME attributes</strong>. </p><p>Can be used in either <strong>output and predicates</strong>. </p><p>Support/syntax varies wildly…</p><h2 id="OUTPUT-REDIRECTION"><a href="#OUTPUT-REDIRECTION" class="headerlink" title="OUTPUT REDIRECTION"></a>OUTPUT REDIRECTION</h2><p>Store <strong>query results</strong> in another table: </p><p>→ <strong>Table must not already be defined</strong>. </p><p>→ Table will have the <strong>same # of columns</strong> with <strong>the same types as the input</strong>.</p><p>Insert tuples from query into another table: </p><p>→ Inner SELECT must generate the same columns as the target table. </p><p>→ DBMSs have different options/syntax on what to do with integrity violations (e.g., invalid duplicates).</p><h2 id="OUTPUT-CONTROL"><a href="#OUTPUT-CONTROL" class="headerlink" title="OUTPUT CONTROL"></a>OUTPUT CONTROL</h2><p><strong>ORDER BY</strong> <column*> [ASC|DESC]</p><p>→ Order the output tuples by the values in one or more of their columns.</p><p><strong>LIMIT</strong>  <strong><count> [offset]</strong> </p><p>→ Limit the # of tuples returned in output. </p><p>→ Can set an offset to return a “range”</p><h2 id="NESTED-QUERIES"><a href="#NESTED-QUERIES" class="headerlink" title="NESTED QUERIES"></a>NESTED QUERIES</h2><p>Queries containing other queries. </p><p>They are often difficult to optimize. </p><p><strong>Inner queries can appear (almost) anywhere in query</strong>.</p><p><strong>ALL</strong>→ Must <strong>satisfy expression for all rows</strong> in the sub-query. </p><p><strong>ANY</strong>→ Must <strong>satisfy expression for at least one row</strong> in the sub-query. </p><p><strong>IN</strong>→ <strong>Equivalent to ‘=ANY()’</strong> . </p><p><strong>EXISTS</strong>→ At <strong>least one row is returned</strong>.</p><h2 id="WINDOW-FUNCTIONS"><a href="#WINDOW-FUNCTIONS" class="headerlink" title="WINDOW FUNCTIONS"></a>WINDOW FUNCTIONS</h2><p>Performs a “sliding” calculation across a set of tuples that are related. </p><p>Like an aggregation but tuples are not grouped into a single output tuples.</p><p>The <strong>OVER</strong> keyword specifies how to <strong>group together tuples</strong> when computing the window function. </p><p>Use <strong>PARTITION BY to specify group</strong>.</p><p>You can also include an <strong>ORDER BY in the window grouping</strong> to sort entries in each group.</p><h2 id="COMMON-TABLE-EXPRESSIONS"><a href="#COMMON-TABLE-EXPRESSIONS" class="headerlink" title="COMMON TABLE EXPRESSIONS"></a>COMMON TABLE EXPRESSIONS</h2><p>Provides a way to write <strong>auxiliary statements for use in a larger query</strong>. </p><p>→ Think of it like a <strong>temp table just for one query</strong>. </p><p>Alternative to nested queries and views.</p><img src="/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/CTE_1.png" class="Window"><img src="/2021/01/21/Database-Sys-Lec2-Intermediate-SQL/CTE_2.png" class="Window">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lecture-2-Intermediate-SQL&quot;&gt;&lt;a href=&quot;#Lecture-2-Intermediate-SQL&quot; class=&quot;headerlink&quot; title=&quot;Lecture #2: Intermediate SQL&quot;&gt;&lt;/a&gt;Lectur
      
    
    </summary>
    
    
      <category term="Computer Science" scheme="https://lavidal.github.io/categories/Computer-Science/"/>
    
    
      <category term="Database System" scheme="https://lavidal.github.io/tags/Database-System/"/>
    
  </entry>
  
  <entry>
    <title>Database Sys Lec1: Course Overview and Relational Model</title>
    <link href="https://lavidal.github.io/2021/01/21/Database-Sys-Lec1-Course-Overview-and-Relational-Model/"/>
    <id>https://lavidal.github.io/2021/01/21/Database-Sys-Lec1-Course-Overview-and-Relational-Model/</id>
    <published>2021-01-21T08:05:04.000Z</published>
    <updated>2021-01-21T06:15:15.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lecture-1-Course-Intro-amp-Relational-Model"><a href="#Lecture-1-Course-Intro-amp-Relational-Model" class="headerlink" title="Lecture #1: Course Intro &amp; Relational Model"></a>Lecture #1: Course Intro &amp; Relational Model</h1><h2 id="Course-Outline"><a href="#Course-Outline" class="headerlink" title="Course Outline"></a>Course Outline</h2><ul><li>Relational Databases </li><li>Storage </li><li>Execution </li><li>Concurrency Control </li><li>Recovery </li><li>Distributed Databases </li><li>Potpourri</li></ul><h2 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h2><h3 id="DATABASE"><a href="#DATABASE" class="headerlink" title="DATABASE"></a>DATABASE</h3><p><strong>Organized collection of inter-related data</strong> that models some aspect of the real-world. </p><p>Databases are core the component of most computer applications.</p><h3 id="DATABASE-MANAGEMENT-SYSTEM"><a href="#DATABASE-MANAGEMENT-SYSTEM" class="headerlink" title="DATABASE MANAGEMENT SYSTEM"></a>DATABASE MANAGEMENT SYSTEM</h3><p>A DBMS is software that allows applications to <strong>store and analyze information</strong> in a database. </p><p>A general-purpose DBMS is designed to allow the <strong>definition, creation, querying, update, and administration</strong> of databases.</p><h3 id="DATA-MODELS"><a href="#DATA-MODELS" class="headerlink" title="DATA MODELS"></a>DATA MODELS</h3><p>A <u><strong>data model</strong></u> is collection of concepts for describing the data in a database. </p><p>A <u><strong>schema</strong></u> is a description of a particular collection of data, using a given data model.</p><h3 id="DATA-MODEL"><a href="#DATA-MODEL" class="headerlink" title="DATA MODEL"></a>DATA MODEL</h3><ul><li>Relational </li><li>Key/Value </li><li>Graph </li><li>Document </li><li>Column-family </li><li>Array / Matrix </li><li>Hierarchical </li><li>Network </li><li>Multi-Value</li></ul><h3 id="RELATIONAL-MODEL"><a href="#RELATIONAL-MODEL" class="headerlink" title="RELATIONAL MODEL"></a>RELATIONAL MODEL</h3><p><strong>Structure</strong>: The definition of the database’s relations and their contents. 数据库关系及其内容的定义。</p><p><strong>Integrity</strong>: Ensure the database’s contents satisfy constraints. </p><p><strong>Manipulation</strong>: Programming interface on how to access and modify a database’s contents.</p><img src="/2021/01/21/Database-Sys-Lec1-Course-Overview-and-Relational-Model/Relational-Model.png" class=""><p><img src="E:\lavidal_blog\source\_posts\Database-Sys-Lec1-Course-Overview-and-Relational-Model\Relational-Model.png" alt="Relational-Model"></p><p>A <u><strong>relation</strong></u> is unordered set that contain the relationship of attributes that represent entities.</p><p>A <strong><u>tuple</u></strong> is a set of attribute values (also known as its domain) in the relation. </p><p>→ Values are (normally) atomic/scalar. </p><p>→ The special value NULL is a member of every domain.</p><h3 id="RELATIONAL-MODEL-PRIMARY-KEYS"><a href="#RELATIONAL-MODEL-PRIMARY-KEYS" class="headerlink" title="RELATIONAL MODEL: PRIMARY KEYS"></a>RELATIONAL MODEL: PRIMARY KEYS</h3><p>A relation’s primary key uniquely identifies a single tuple.</p><p>Some DBMSs <strong>automatically</strong> create an internal primary key if a table does not define one.</p><p>Auto-generation of unique integer primary keys:</p><p>→ SEQUENCE (SQL:2003)</p><p>→ AUTO_INCREMENT (MySQL)</p><h3 id="RELATIONAL-MODEL-FOREIGN-KEYS"><a href="#RELATIONAL-MODEL-FOREIGN-KEYS" class="headerlink" title="RELATIONAL MODEL: FOREIGN KEYS"></a>RELATIONAL MODEL: FOREIGN KEYS</h3><p>A foreign key specifies that <strong>an attribute from one relation has to map to a tuple in another relation</strong>.</p><img src="/2021/01/21/Database-Sys-Lec1-Course-Overview-and-Relational-Model/RELATIONAL-MODEL-FOREIGN-KEYS-1.png" class=""><img src="/2021/01/21/Database-Sys-Lec1-Course-Overview-and-Relational-Model/RELATIONAL-MODEL-FOREIGN-KEYS-2.png" class=""><p><img src="E:\lavidal_blog\source\_posts\Database-Sys-Lec1-Course-Overview-and-Relational-Model\RELATIONAL-MODEL-FOREIGN-KEYS-1.png" alt="RELATIONAL-MODEL-FOREIGN-KEYS-1"></p><p><img src="E:\lavidal_blog\source\_posts\Database-Sys-Lec1-Course-Overview-and-Relational-Model\RELATIONAL-MODEL-FOREIGN-KEYS-2.png" alt="RELATIONAL-MODEL-FOREIGN-KEYS-2"></p><h2 id="DATA-MANIPULATION-LANGUAGES-DML"><a href="#DATA-MANIPULATION-LANGUAGES-DML" class="headerlink" title="DATA MANIPULATION LANGUAGES (DML)"></a>DATA MANIPULATION LANGUAGES (DML)</h2><p><strong>Methods to store and retrieve information</strong> from a database.</p><p><strong>Procedural:</strong> </p><p>→ The query specifies the (high-level) strategy the DBMS should use to find the desired result.</p><p><strong>Non-Procedural:</strong> </p><p>→ The query specifies only what data is wanted and not how to find it.</p><p><img src="E:\lavidal_blog\source\_posts\Database-Sys-Lec1-Course-Overview-and-Relational-Model\DATA MANIPULATION LANGUAGES (DML" alt="DATA MANIPULATION LANGUAGES (DML)">.png)</p><h2 id="RELATIONAL-ALGEBRA"><a href="#RELATIONAL-ALGEBRA" class="headerlink" title="RELATIONAL ALGEBRA"></a>RELATIONAL ALGEBRA</h2><p><strong>Fundamental operations to retrieve and manipulate</strong> tuples in a relation. → Based on set algebra. </p><p>Each operator takes <strong>one or more relations as its inputs</strong> and <strong>outputs a new relation</strong>. </p><p>→ We can “chain” operators together to create more complex operations.</p><img src="/2021/01/21/Database-Sys-Lec1-Course-Overview-and-Relational-Model/Relational-Algebra-Operators.png" class=""><p><img src="E:\lavidal_blog\source\_posts\Database-Sys-Lec1-Course-Overview-and-Relational-Model\Relational-Algebra-Operators.png" alt="Relational-Algebra-Operators"></p><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><p>Choose a <strong>subset of the tuples</strong> from a relation that <strong>satisfies a selection predicate</strong>.</p><h3 id="PROJECTION"><a href="#PROJECTION" class="headerlink" title="PROJECTION"></a>PROJECTION</h3><p>Generate a relation with tuples that contains only the <strong>specified attributes</strong>.</p><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><p>Generate a relation that <strong>contains all tuples that appear in either only one or both input relations</strong>.</p><h3 id="INTERSECTION"><a href="#INTERSECTION" class="headerlink" title="INTERSECTION"></a>INTERSECTION</h3><p>Generate a relation that <strong>contains only</strong> the tuples that appear <strong>in both of the input relations</strong>.</p><h3 id="DIFFERENCE"><a href="#DIFFERENCE" class="headerlink" title="DIFFERENCE"></a>DIFFERENCE</h3><p>Generate a relation that contains <strong>only the tuples that appear in the first</strong> and <strong>not the second</strong> of the input relations.</p><h3 id="PRODUCT"><a href="#PRODUCT" class="headerlink" title="PRODUCT"></a>PRODUCT</h3><p>Generate a relation that contains <strong>all possible combinations</strong> of tuples from the input relations.</p><h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><p>Generate a relation that contains all tuples that are a combination of two tuples (one from each input relation) with a common value(s) for one or more </p><img src="/2021/01/21/Database-Sys-Lec1-Course-Overview-and-Relational-Model/RELATIONAL-ALGEBRA-EXTRA-OPERATORS.png" class=""><p>attributes.<img src="E:\lavidal_blog\source\_posts\Database-Sys-Lec1-Course-Overview-and-Relational-Model\RELATIONAL-ALGEBRA-EXTRA-OPERATORS.png" alt="RELATIONAL-ALGEBRA-EXTRA-OPERATORS"></p><h3 id="OBSERVATION"><a href="#OBSERVATION" class="headerlink" title="OBSERVATION"></a>OBSERVATION</h3><p>Relational algebra still defines the high-level steps of how to compute a query.</p><p>A better approach is to state <strong>the high-level answer that you want the DBMS to compute</strong>. </p><p>→ Retrieve the joined tuples from R and S where b_id equals 102.</p><p>因为relational algebra还是对于人类来说太抽象，所以有了query语言</p><h3 id="RELATIONAL-MODEL-QUERIES"><a href="#RELATIONAL-MODEL-QUERIES" class="headerlink" title="RELATIONAL MODEL: QUERIES"></a>RELATIONAL MODEL: QUERIES</h3><p>The <strong>relational model is independent of any query language implementation</strong>. </p><p>SQL is the de facto standard (many dialects).</p><h2 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h2><p>Databases are ubiquitous. </p><p><strong>Relational algebra defines the primitives for processing queries</strong> on a relational database. </p><p>We will see <strong>relational algebra</strong> again when we talk about <strong>query optimization + execution</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lecture-1-Course-Intro-amp-Relational-Model&quot;&gt;&lt;a href=&quot;#Lecture-1-Course-Intro-amp-Relational-Model&quot; class=&quot;headerlink&quot; title=&quot;Lectur
      
    
    </summary>
    
    
      <category term="Computer Science" scheme="https://lavidal.github.io/categories/Computer-Science/"/>
    
    
      <category term="Database System" scheme="https://lavidal.github.io/tags/Database-System/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Weekly Contest 204</title>
    <link href="https://lavidal.github.io/2020/08/30/Leetcode-Weekly-Contest-204/"/>
    <id>https://lavidal.github.io/2020/08/30/Leetcode-Weekly-Contest-204/</id>
    <published>2020-08-30T07:49:56.000Z</published>
    <updated>2020-08-30T05:07:22.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p><strong>Rank</strong>: 599/13949</p><p><strong>Score</strong>: 13(Q1~3)</p><p><strong>Finish Time</strong>: 0:51:39</p><p>This contest is interesting.  Q3 is tricky and Q4 is worth trying.</p><h3 id="Q2-Maximum-Length-of-Subarray-With-Positive-Product"><a href="#Q2-Maximum-Length-of-Subarray-With-Positive-Product" class="headerlink" title="Q2 Maximum Length of Subarray With Positive Product"></a>Q2 Maximum Length of Subarray With Positive Product</h3><p><a href="https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/</a></p><p>This is a typical dp problem. When it’s about max/min length of subarray, you can try to use dynamic programming and define dp array like the max/min length ending with index i.</p><p>My solution is below. O(n) for time complexity and O(n) for space complexity.</p><p>But we can easily improve it into O(1) space complexity.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def getMaxLen(self, nums: List[int]) -&gt; int:</span><br><span class="line">        n &#x3D; len(nums)</span><br><span class="line">        dp &#x3D; [[0, 0] for _ in range(n)]</span><br><span class="line">        </span><br><span class="line">        if nums[0] &gt; 0: dp[0][0] &#x3D; 1</span><br><span class="line">        elif nums[0] &lt; 0: dp[0][1] &#x3D; 1</span><br><span class="line">        </span><br><span class="line">        for i in range(1, n):</span><br><span class="line">            if nums[i] &#x3D;&#x3D; 0:</span><br><span class="line">                continue</span><br><span class="line">            elif nums[i] &gt; 0:</span><br><span class="line">                dp[i][0] &#x3D; dp[i - 1][0] + 1</span><br><span class="line">                dp[i][1] &#x3D; dp[i - 1][1] + 1 if dp[i - 1][1] &gt; 0 else 0</span><br><span class="line">            else:</span><br><span class="line">                dp[i][0] &#x3D; dp[i - 1][1] + 1 if dp[i - 1][1] &gt; 0 else 0</span><br><span class="line">                dp[i][1] &#x3D; dp[i - 1][0] + 1</span><br><span class="line">        </span><br><span class="line">        return max([x[0] for x in dp])</span><br></pre></td></tr></table></figure><h3 id="Q3-Minimum-Number-of-Days-to-Disconnect-Island"><a href="#Q3-Minimum-Number-of-Days-to-Disconnect-Island" class="headerlink" title="Q3 Minimum Number of Days to Disconnect Island"></a>Q3 Minimum Number of Days to Disconnect Island</h3><p><a href="https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island/" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island/</a></p><p>This one is really tricky.</p><p>At first it feel like we need to find the bridge and use algorithm like Tarjan. But then I find that the result of days will not be greater than 2! Just think about corner of connected component.</p><p>Thus we just need to enumerate 0, 1, 2 this three condition.</p><p>0 means there are multiple island. 1 means we can delete one ‘1’ and it’s not fully connected. Use bfs to check that. If it’s not 0 nor 1, then it must be 2!</p><p>Below is my solution. O(m^2*n^2) for time and space complexity.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line">class Solution:</span><br><span class="line">    def minDays(self, grid: List[List[int]]) -&gt; int:</span><br><span class="line">        m, n &#x3D; len(grid), len(grid[0])</span><br><span class="line">        cnt_ones &#x3D; 0</span><br><span class="line">        for i in range(m):</span><br><span class="line">            for j in range(n):</span><br><span class="line">                if grid[i][j]:</span><br><span class="line">                    cnt_ones +&#x3D; 1</span><br><span class="line">        </span><br><span class="line">        if cnt_ones &#x3D;&#x3D; 0: return 0</span><br><span class="line">        elif cnt_ones &#x3D;&#x3D; 1: return 1</span><br><span class="line">        </span><br><span class="line">        bfs_cnt &#x3D; self.bfs(grid)</span><br><span class="line">        if bfs_cnt !&#x3D; cnt_ones: return 0</span><br><span class="line">        </span><br><span class="line">        # whether only use 1 day</span><br><span class="line">        for i in range(m):</span><br><span class="line">            for j in range(n):</span><br><span class="line">                if grid[i][j]:</span><br><span class="line">                    grid[i][j] &#x3D; 0</span><br><span class="line">                    bfs_cnt &#x3D; self.bfs(grid)</span><br><span class="line">                    if bfs_cnt !&#x3D; cnt_ones - 1: return 1</span><br><span class="line">                    grid[i][j] &#x3D; 1</span><br><span class="line">        return 2</span><br><span class="line">                    </span><br><span class="line">    def bfs(self, grid):# return cnt of ones</span><br><span class="line">        m, n &#x3D; len(grid), len(grid[0])</span><br><span class="line">        start &#x3D; None</span><br><span class="line">        move &#x3D; [(0, 1), (1, 0), (0, -1), (-1, 0)]</span><br><span class="line">        for i in range(m):</span><br><span class="line">            for j in range(n):</span><br><span class="line">                if grid[i][j]:</span><br><span class="line">                    start &#x3D; (i, j)</span><br><span class="line">                    break</span><br><span class="line">            if grid[i][j]: break</span><br><span class="line">        </span><br><span class="line">        queue &#x3D; deque([start])</span><br><span class="line">        visited &#x3D; set()</span><br><span class="line">        visited.add(start)</span><br><span class="line">        </span><br><span class="line">        while queue:</span><br><span class="line">            x, y &#x3D; queue.popleft()</span><br><span class="line">            for dx, dy in move:</span><br><span class="line">                nx, ny &#x3D; x + dx, y + dy</span><br><span class="line">                if not (0 &lt;&#x3D; nx &lt; m and 0 &lt;&#x3D; ny &lt; n and grid[nx][ny]): continue</span><br><span class="line">                np &#x3D; (nx, ny)</span><br><span class="line">                if np in visited: continue</span><br><span class="line">                queue.append(np)</span><br><span class="line">                visited.add(np)</span><br><span class="line">        </span><br><span class="line">        return len(visited)</span><br></pre></td></tr></table></figure><h3 id="Q4-Number-of-Ways-to-Reorder-Array-to-Get-Same-BST"><a href="#Q4-Number-of-Ways-to-Reorder-Array-to-Get-Same-BST" class="headerlink" title="Q4 Number of Ways to Reorder Array to Get Same BST"></a>Q4 Number of Ways to Reorder Array to Get Same BST</h3><p><a href="https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/" target="_blank" rel="noopener">https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/</a></p><p>This one is interesting and not that hard. Actually I got the right approach and feelings but messed up some parts.</p><p>“When it comes to BST, this about root and its left and right child’s relationship.”</p><p>This problem is also following that thinking.</p><p>It’s about how many reorder of left and right and how many ways to combine left and right’s order nums!</p><p>Below is the implementation. Not sure about time and space complexity.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from math import comb</span><br><span class="line">class Solution:</span><br><span class="line">    def numOfWays(self, nums: List[int]) -&gt; int:</span><br><span class="line">        mod &#x3D; 10 ** 9 + 7</span><br><span class="line">        def cnt(nums):</span><br><span class="line">            n &#x3D; len(nums)</span><br><span class="line">            if n &lt;&#x3D; 1: return n</span><br><span class="line">            left &#x3D; [x for x in nums if x &lt; nums[0] ]</span><br><span class="line">            right &#x3D; [x for x in nums if x &gt; nums[0]]</span><br><span class="line">            </span><br><span class="line">            left_cnt, right_cnt &#x3D; cnt(left), cnt(right)</span><br><span class="line">            # in case there are 0 for cnt</span><br><span class="line">            if not left_cnt: return right_cnt</span><br><span class="line">            if not right_cnt: return left_cnt</span><br><span class="line">            </span><br><span class="line">            return (comb(len(left) + len(right), len(right)) * left_cnt * right_cnt) % mod</span><br><span class="line">            </span><br><span class="line">        return cnt(nums) - 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Rank&lt;/strong&gt;: 599/13949&lt;/p&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="Competitive Programming" scheme="https://lavidal.github.io/categories/Competitive-Programming/"/>
    
      <category term="Algorithm" scheme="https://lavidal.github.io/categories/Competitive-Programming/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://lavidal.github.io/tags/Algorithm/"/>
    
      <category term="Competitive Programming" scheme="https://lavidal.github.io/tags/Competitive-Programming/"/>
    
  </entry>
  
  <entry>
    <title>80 Percent of Cpp</title>
    <link href="https://lavidal.github.io/2020/08/23/80-Percent-of-Cpp/"/>
    <id>https://lavidal.github.io/2020/08/23/80-Percent-of-Cpp/</id>
    <published>2020-08-23T21:20:33.000Z</published>
    <updated>2020-08-25T16:08:20.924Z</updated>
    
    <content type="html"><![CDATA[<p>Updating</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Updating&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Programming language" scheme="https://lavidal.github.io/categories/Programming-language/"/>
    
    
      <category term="Programming language" scheme="https://lavidal.github.io/tags/Programming-language/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Traversal</title>
    <link href="https://lavidal.github.io/2020/08/22/Binary-Tree-Traversal/"/>
    <id>https://lavidal.github.io/2020/08/22/Binary-Tree-Traversal/</id>
    <published>2020-08-22T21:55:16.000Z</published>
    <updated>2020-08-23T18:14:57.415Z</updated>
    
    <content type="html"><![CDATA[<p>In this article we will discuss two approaches to do binary tree traversal: recursion based and stack based.</p><p>In general, these two approach have their own strengths and weaknesses. The recursion ones are easy to understand and implement however might cause stack overflow. The stack based are more efficient in terms of memory but hard to understand and more complex to implement compared to recursion based approach. Normally on a coding interview, the interviewer prefers stack based binary tree traversal.</p><p>We will discuss four types of binary tree traversal:</p><ul><li>Preorder Traversal <a href="https://leetcode.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-preorder-traversal/</a></li><li>Inorder Traversal <a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-inorder-traversal/</a></li><li>Postorder Traversal <a href="https://leetcode.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-postorder-traversal/</a></li><li>Level Order Traversal <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-level-order-traversal/</a></li></ul><h3 id="Binary-Tree-Preorder-Traversal"><a href="#Binary-Tree-Preorder-Traversal" class="headerlink" title="Binary Tree Preorder Traversal"></a>Binary Tree Preorder Traversal</h3><h4 id="Recursion-based"><a href="#Recursion-based" class="headerlink" title="Recursion based"></a>Recursion based</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        self.helper(root, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, res)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        res.append(root.val)</span><br><span class="line">        self.helper(root.left, res)</span><br><span class="line">        self.helper(root.right, res)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="Stack-based"><a href="#Stack-based" class="headerlink" title="Stack based:"></a>Stack based:</h4><h5 id="How-to-derive-a-stack-based-solution"><a href="#How-to-derive-a-stack-based-solution" class="headerlink" title="How to derive a stack-based solution?"></a>How to derive a stack-based solution?</h5><p>For preorder traversal, it’s root-&gt;left-&gt;right. So for any node, we first get its value and then check if it has left child. If so, we goes into left child. Until it’s none. If it’s none, we want to check it’s right child. </p><p>Remember after visited left child we want to visit its right child. That why we need stack. </p><p>“For each node, it is root to itself.”</p><p>For any node the detailed steps are:</p><p>1) Get its value, store the node into stack and goes to its left child</p><p>2) If left child is none then pop the stack and goes into its right child. If left child is valid then continue step 1</p><p>Universal one:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        stk = []</span><br><span class="line">        res = []</span><br><span class="line">        tmp = root</span><br><span class="line">        <span class="keyword">while</span> tmp <span class="keyword">or</span> stk:</span><br><span class="line">            <span class="keyword">if</span> tmp:</span><br><span class="line">                res.append(tmp.val)</span><br><span class="line">                stk.append(tmp)</span><br><span class="line">                tmp = tmp.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = stk.pop()</span><br><span class="line">                tmp = tmp.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>Special yet simple one:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        stk = [root]</span><br><span class="line">        <span class="keyword">while</span> stk:</span><br><span class="line">            tmp = stk.pop()</span><br><span class="line">            res.append(tmp.val)</span><br><span class="line">            <span class="keyword">if</span> tmp.right:</span><br><span class="line">                stk.append(tmp.right)</span><br><span class="line">            <span class="keyword">if</span> tmp.left:</span><br><span class="line">                stk.append(tmp.left)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Inorder-Traversal"><a href="#Binary-Tree-Inorder-Traversal" class="headerlink" title="Binary Tree Inorder Traversal"></a>Binary Tree Inorder Traversal</h3><h4 id="Recursion-based-1"><a href="#Recursion-based-1" class="headerlink" title="Recursion based:"></a>Recursion based:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        self.helper(root, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, res)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        self.helper(root.left, res)</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        self.helper(root.right, res)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="Stack-based-1"><a href="#Stack-based-1" class="headerlink" title="Stack based:"></a>Stack based:</h4><h5 id="How-to-derive-a-stack-based-solution-1"><a href="#How-to-derive-a-stack-based-solution-1" class="headerlink" title="How to derive a stack-based solution?"></a>How to derive a stack-based solution?</h5><p>For inorder traversal, it’s left-&gt;root-&gt;right. So for any node, we check if it has left child. If so, we goes into left child. Until it’s none. If it’s none, we want to get back to node gets its value and check it’s right child. </p><p>Remember after visited left child we want to visit itself.</p><p>“For each node, it is root to itself.”</p><p>For any node the detailed steps are:</p><p>1) Store the node into stack and goes to its left child</p><p>2) If left child is none then pop the stack, gets the node’s value and  goes into its right child. If left child is valid then continue step 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res, stk = [], []</span><br><span class="line">        tmp = root</span><br><span class="line">        <span class="keyword">while</span> tmp <span class="keyword">or</span> stk:</span><br><span class="line">            <span class="keyword">if</span> tmp:</span><br><span class="line">                stk.append(tmp)</span><br><span class="line">                tmp = tmp.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = stk.pop()</span><br><span class="line">                res.append(tmp.val)</span><br><span class="line">                tmp = tmp.right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Postorder-Traversal"><a href="#Binary-Tree-Postorder-Traversal" class="headerlink" title="Binary Tree Postorder Traversal"></a>Binary Tree Postorder Traversal</h3><h4 id="Recursion-based-2"><a href="#Recursion-based-2" class="headerlink" title="Recursion based:"></a>Recursion based:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        self.helper(root, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, res)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        self.helper(root.left, res)</span><br><span class="line">        self.helper(root.right, res)</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="Stack-based-2"><a href="#Stack-based-2" class="headerlink" title="Stack based:"></a>Stack based:</h4><h5 id="How-to-derive-a-stack-based-solution-2"><a href="#How-to-derive-a-stack-based-solution-2" class="headerlink" title="How to derive a stack-based solution?"></a>How to derive a stack-based solution?</h5><p>Can’t use the universal template for preorder and inorder. Because it’s left-&gt;right-&gt;root, the root is the last one to visit. It’s useless to use stack. Because when we pop a node from stack, it’s root to itself.</p><p>This one is harder than others. But we have a tricky solution. We just traverse tree in root-right-left order. And return the reversed result is the correct answer!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res, stk = [], []</span><br><span class="line">        tmp = root</span><br><span class="line">        <span class="keyword">while</span> tmp <span class="keyword">or</span> stk:</span><br><span class="line">            <span class="keyword">if</span> tmp:</span><br><span class="line">                res.append(tmp.val)</span><br><span class="line">                stk.append(tmp)</span><br><span class="line">                tmp = tmp.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = stk.pop()</span><br><span class="line">                tmp = tmp.left</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a>Binary Tree Level Order Traversal</h3><p>This one we use queue and breadth first search instead. </p><p>Recommend you look <a href="https://lavidal.github.io/2020/08/06/Breadth-First-Search/">https://lavidal.github.io/2020/08/06/Breadth-First-Search/</a> for the idea and solution!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this article we will discuss two approaches to do binary tree traversal: recursion based and stack based.&lt;/p&gt;
&lt;p&gt;In general, these two
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://lavidal.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://lavidal.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>80 Percent of Go</title>
    <link href="https://lavidal.github.io/2020/08/19/80-of-Go/"/>
    <id>https://lavidal.github.io/2020/08/19/80-of-Go/</id>
    <published>2020-08-19T23:32:12.000Z</published>
    <updated>2020-08-22T23:12:43.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Go is expressive, concise, clean, and efficient. Its <strong>concurrency mechanisms</strong> make it easy to write programs that <strong>get the most out of multicore and networked machines</strong>, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of <strong>garbage collection and the power of run-time reflection</strong>. It’s a <strong>fast, statically typed, compiled</strong> language that <strong>feels like a dynamically typed, interpreted language</strong>.</p><p>​                                                                                                                                                                                                                —<a href="https://golang.google.cn/doc/" target="_blank" rel="noopener">https://golang.google.cn/doc/</a></p></blockquote><p>Updating</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Go is expressive, concise, clean, and efficient. Its &lt;strong&gt;concurrency mechanisms&lt;/strong&gt; make it easy to write programs 
      
    
    </summary>
    
    
      <category term="Programming language" scheme="https://lavidal.github.io/categories/Programming-language/"/>
    
    
      <category term="Programming language" scheme="https://lavidal.github.io/tags/Programming-language/"/>
    
  </entry>
  
  <entry>
    <title>89感</title>
    <link href="https://lavidal.github.io/2020/08/09/89%E6%84%9F/"/>
    <id>https://lavidal.github.io/2020/08/09/89%E6%84%9F/</id>
    <published>2020-08-09T18:36:21.000Z</published>
    <updated>2020-08-09T16:28:20.317Z</updated>
    
    <content type="html"><![CDATA[<p>假期以来，学习上的进步不大，倒是做饭和弹琴越来越熟练。</p><p>这个假期感触最大的一点是，一切问题都源于身体，而我的一切身体问题其实就是睡得好不好的问题。上学期天天熬夜的习惯延续到了六月和七月，整天状态不好。而我状态不好的时候喜欢自己兜着，于是造成沉默的假象hh。但七月末调整睡眠之后，其实整个人的状态就会好很多。</p><p>想来自己也是悟得慢，毛主席说过的身体是革命的本钱，竟然现在才切身体会到。不过自己二十岁才学会洗头这件事儿，也符合我的特点了。洗头洗的是头皮而非头发，知道了才明白之前为何总洗不干净。吐槽完毕。</p><p>前几天完整看了人生中的第二部恐怖片：咒怨。老司机觉得平淡无奇，但是作为这块的新手，还是觉得恐怖的。看完后已是凌晨五点，熬夜的感觉就是很后悔，身体很难受。那天晚上是开着灯睡的，因为自己总会想到刚刚看到的电影，真是。依然是个大男孩，和第一次看完恐怖片一样，整个人紧张的不行。以后也别逞强看恐怖片了，真不合适。</p><p>这一周追乐队的夏天，有个人给我的印象很深，重塑的华东老师。不知道是节目组剪辑的问题还是人本身就这样，华东给我的第一感觉很不好。觉得这人特别装，高人一等的感觉。但是看到后面，觉得他确实有实力，装可能只是给我们的感觉，他真实的一面就是很严谨的。他说他不相信灵感，他认为创作音乐应该是想搭积木一样按照一个规律先做框架然后加其他东西。作为理工男倒是能理解这种思维。这只乐队是真的很独特。</p><p>乐夏另一个impressive的乐队是白皮书，子健评价说他们的歌段落与段落之间不是平滑过渡的，而是尖锐的直角。我没听出来，音乐乐理还得学。</p><p>吉他最近在尝试认识指板fretboard，想把上边所有的音记住。之前学的la指型，mi指型全忘了，真是无总结便无记忆。看了很多John Mayer的live视频，我最喜欢的美国歌手之一，最喜欢的吉他手。live演奏太帅了，solo两分钟，才华横溢。有些歌曲，你不看歌词，会觉得这首歌曲无感，但看了歌词就越听越好听。Slow dancing in a burning room就是这样一首歌，编曲好听，歌词更是romantic。歌名slow dancing in a burning room，这个意象真是妙，太浪漫了的一首slow rock了。</p><p>看张一鸣说他的大学收获，说的是耐心，读书，修电脑。真是搞技术的榜样，前两点还是很有借鉴意义的。耐心这点，我突然想到心流这个词，我总觉得其实没有所谓的耐心这一说，之所以能够专心的持续做一件事，是因为做事的过程中，已经沉浸在了心流之中。正所谓物我两忘。黑镜：潘达斯奈基这部里男二号也对男主说了心流这个词。“How do you get into flow?” 你怎么进入心流？很可惜电影并没能给出建设性意见。</p><p>马上要开始全职申请季了，陈绮贞说过人们总是对未发生的事情充满各种想象的恐惧，这或许是焦虑的来源。接下来好好学习，好好看书，好好练琴罢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假期以来，学习上的进步不大，倒是做饭和弹琴越来越熟练。&lt;/p&gt;
&lt;p&gt;这个假期感触最大的一点是，一切问题都源于身体，而我的一切身体问题其实就是睡得好不好的问题。上学期天天熬夜的习惯延续到了六月和七月，整天状态不好。而我状态不好的时候喜欢自己兜着，于是造成沉默的假象hh。但七
      
    
    </summary>
    
    
      <category term="随感" scheme="https://lavidal.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="https://lavidal.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Breadth First Search</title>
    <link href="https://lavidal.github.io/2020/08/06/Breadth-First-Search/"/>
    <id>https://lavidal.github.io/2020/08/06/Breadth-First-Search/</id>
    <published>2020-08-06T22:41:59.000Z</published>
    <updated>2020-08-07T19:33:23.030Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新题目列表</p><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><p>• 什么时候使用 BFS</p><p>• 二叉树上的 BFS </p><p>• 图上的 BFS</p><p>• 矩阵上的 BFS </p><p>• 拓扑排序 Topological Sorting</p><h3 id="什么时候应该使用BFS？"><a href="#什么时候应该使用BFS？" class="headerlink" title="什么时候应该使用BFS？"></a>什么时候应该使用BFS？</h3><p><strong>图的遍历 Traversal in Graph</strong></p><p>• 层级遍历 Level Order Traversal </p><p>• 由点及面 Connected Component:其实就是判断点有没有联通</p><p>• 拓扑排序 Topological Sorting</p><p><strong>简单图最短路径 Shortest Path in Simple Graph</strong></p><p><strong>非递归的方式找所有方案 Iteration solution for all possible results</strong> </p><p>P.S. 如果题目问最短路径 除了BFS还可能是什么算法？ 如果问最长路径呢？</p><p><strong>最短路径</strong></p><p>简单图 →  BFS </p><p>复杂图 → Dijkstra, SPFA, Floyd（一般面试不考这个）</p><p><strong>最长路径</strong></p><p>图可以分层 → Dynamic Programming</p><p>分层：比如走到第i一定会经过第 i-1 层（棋盘格子图是典型的例子）</p><p>不可以分层 → DFS</p><h3 id="Code-Template"><a href="#Code-Template" class="headerlink" title="Code Template"></a>Code Template</h3><p>我一般使用双端队列，没试过用普通Queue去做。按照大佬的说法，那个Queue主要是服务于多线程。如果队列里没有东西然后POP的话，会block在那儿，结果就是超时TLE。所以一般还是用collections.deque。</p><p>P.S. 双端队列内部实现使用的是双向链表。队列用的链表，栈用的数组，因为它就是在尾巴上进行操作。或者两个队列轮着换来做，这样相当于栈。</p><p>关于deque一般也就用popleft和append，很少用到它的appendleft和pop。用deque两个好处，一个就是快，Queue它服务于多线程，会加锁，所以会慢一些。以上说的是python，Java的queue没问题。</p><p>然后BFS的思路用语言说可以总结成这么两步：</p><p>创建一个队列，并把起点放置进去</p><p>while队列不空，弹出队头，将它的邻居加入队列。（如果是图需要哈希表来防止访问已经到过的节点）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">queue = deque([root])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(queue):</span><br><span class="line">        head = queue.popleft()</span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> head.neighbors:</span><br><span class="line">            do_sth_with(neighbor)</span><br><span class="line">            queue.append(neighbor)</span><br></pre></td></tr></table></figure><p><strong>If we care about level</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">queue = deque([root])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(queue):</span><br><span class="line">    currenlevel = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(queue)):</span><br><span class="line">        head = queue.popleft()</span><br><span class="line">        currenlevel.append(head.val)</span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> head.neighbors:</span><br><span class="line">            do_sth_with(neighbor)</span><br><span class="line">            queue.append(neighbor)</span><br></pre></td></tr></table></figure><h3 id="BFS-Key-Points"><a href="#BFS-Key-Points" class="headerlink" title="BFS Key Points"></a>BFS Key Points</h3><p><strong>使用队列作为主要的数据结构 Queue</strong> </p><p>思考：用栈（Stack）是否可行？为什么行 or 为什么不行？</p><p><strong>是否需要实现分层？</strong> </p><p>需要分层的算法比不需要分层的算法多一个循环</p><p><strong>Java / C++: size=queue.size()</strong> </p><p>如果直接 for (int i = 0; i &lt; queue.size(); i++) 会怎么样？ </p><h3 id="BFS-in-Binary-Tree"><a href="#BFS-in-Binary-Tree" class="headerlink" title="BFS in Binary Tree"></a>BFS in Binary Tree</h3><p>Binary Tree Level Order Traversal : <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-level-order-traversal/</a></p><p>Binary Tree Serialization (M+Y)  <a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/serialize-and-deserialize-binary-tree/</a></p><p>P.S. 什么是<strong>序列化</strong>？ </p><p>将“内存”中结构化的数据变成“字符串”的过程。</p><p>序列化：object to string </p><p>反序列化：string to object</p><p><strong>什么时候需要序列化？</strong></p><ol><li><p>将内存中的数据持久化存储时 </p><p>内存中重要的数据不能只是呆在内存里，这样断电就没有了，所需需要用一种方式写入硬盘，在需要 的时候，能否再从硬盘中读出来在内存中重新创建</p></li><li><p>网络传输时 </p><p>机器与机器之间交换数据的时候，不可能互相去读对方的内存。只能讲数据变成字符流数据（字符串） 后通过网络传输过去。接受的一方再将字符串解析后到内存中。</p><p>常用的一些序列化手段：</p><p>• XML </p><p>• Json </p><p>• Thrift (by Facebook) </p><p>• ProtoBuf (by Google)</p></li></ol><p><strong>序列化算法</strong></p><p>一些序列化的例子： </p><p>• 比如一个数组，里面都是整数，我们可以简单的序列化为”[1,2,3]” </p><p>• 一个整数链表，我们可以序列化为，”1-&gt;2-&gt;3” </p><p>• 一个哈希表(HashMap)，我们可以序列化为，”{\”key\”: \”value\”}”</p><p>序列化算法设计时需要考虑的因素：</p><p>• 压缩率。对于网络传输和磁盘存储而言，当然希望更节省。 </p><p>​    • 如 Thrift, ProtoBuf 都是为了更快的传输数据和节省存储空间而设计的。 </p><p>• 可读性。我们希望开发人员，能够通过序列化后的数据直接看懂原始数据是什么。 </p><p>​    • 如 Json，LintCode 的输入数据</p><p>Binary Tree Level Order Traversal II <a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-level-order-traversal-ii/</a></p><p>Binary Tree Zigzag Level Order Traversal <a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/</a></p><p>Flatten Binary Tree to Linked List <a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener">https://leetcode.com/problems/flatten-binary-tree-to-linked-list/</a></p><h3 id="BFS-in-Graph"><a href="#BFS-in-Graph" class="headerlink" title="BFS in Graph"></a>BFS in Graph</h3><h4 id="和树上有什么区别？"><a href="#和树上有什么区别？" class="headerlink" title="和树上有什么区别？"></a>和树上有什么区别？</h4><p>Ans: 图意味着有环，所以需要一个<strong>哈希表</strong>来记录已访问的节点，防止重复访问。</p><h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems:"></a>Problems:</h4><p>Clone Graph (F)  <a href="https://leetcode.com/problems/clone-graph" target="_blank" rel="noopener">https://leetcode.com/problems/clone-graph</a></p><p>Word Ladder  <a href="https://leetcode.com/problems/word-ladder/" target="_blank" rel="noopener">https://leetcode.com/problems/word-ladder/</a></p><p>Word Ladder II <a href="https://leetcode.com/problems/word-ladder-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/word-ladder-ii/</a></p><p>最典型的BFS问题 —— 隐式图 (Implicit Graph) 最短路径</p><h3 id="BFS-in-Matrix"><a href="#BFS-in-Matrix" class="headerlink" title="BFS in Matrix"></a>BFS in Matrix</h3><h4 id="矩阵与图有什么区别呢？"><a href="#矩阵与图有什么区别呢？" class="headerlink" title="矩阵与图有什么区别呢？"></a>矩阵与图有什么区别呢？</h4><h5 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图 Graph"></a>图 Graph</h5><p>N个点，M条边 </p><p>M最大是 O(N^2) 的级别 </p><p>图上BFS时间复杂度 = O(N + M) </p><p>• 说是O(M)问题也不大，因为M一般都比N大 </p><p>所以最坏情况可能是 O(N^2)</p><h5 id="矩阵-Matrix"><a href="#矩阵-Matrix" class="headerlink" title="矩阵 Matrix"></a>矩阵 Matrix</h5><p>R行C列 </p><p>RC个点，2RC 条边（每个点上下左右4条边，每条边被2个点共享）。 </p><p>矩阵中BFS时间复杂度 = O(R * C)</p><h4 id="Problems-1"><a href="#Problems-1" class="headerlink" title="Problems:"></a>Problems:</h4><p>Number of Islands <a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="noopener">https://leetcode.com/problems/number-of-islands/</a></p><h3 id="Topological-Sorting"><a href="#Topological-Sorting" class="headerlink" title="Topological Sorting"></a>Topological Sorting</h3><p>几乎每个公司都有一道拓扑排序的面试题。</p><p>插一嘴，能够用 BFS 解决的问题，不要用 DFS 去做。 </p><p>因为用 Recursion 实现的 DFS 可能造成 StackOverflow! (Iteration 的 DFS 一来你不会写，二来面试官也看不懂)</p><h4 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h4><p>入度（In-degree）： </p><p>有向图（Directed Graph）中指向当前节点的点的个数（或指向当前节点的边的条数）</p><p>算法描述：</p><ol><li><p>统计每个点的入度 </p></li><li><p>将每个入度为 0 的点放入队列（Queue）中作为起始节点 </p></li><li><p>不断从队列中拿出一个点，去掉这个点的所有连边（指向其他点的边），其他点的相应的入度 - 1 </p></li><li><p>一旦发现新的入度为 0 的点，丢回队列中</p></li></ol><p>   拓扑排序并不是传统的排序算法 <strong>一个图可能存在多个拓扑序（Topological Order），也可能不存在任何拓扑序</strong>。</p><h4 id="拓扑排序的四种不同问法"><a href="#拓扑排序的四种不同问法" class="headerlink" title="拓扑排序的四种不同问法"></a>拓扑排序的四种不同问法</h4><p>求任意1个拓扑序（Topological Order）用上面的BFS思路即可</p><p>问是否存在拓扑序（是否可以被拓扑排序） 用上面的BFS思路即可</p><p>求所有的拓扑序 <strong>DFS</strong></p><p>求是否存在且仅存在一个拓扑序 <strong>Queue中最多同时只有1个节点</strong></p><p>还有一种：</p><p>求最小拓扑序(alien dictionary)</p><h4 id="Problems-2"><a href="#Problems-2" class="headerlink" title="Problems:"></a>Problems:</h4><p>Course Schedule <a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="noopener">https://leetcode.com/problems/course-schedule/</a></p><p>Course Schedule II <a href="https://leetcode.com/problems/course-schedule-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/course-schedule-ii/</a></p><p>Alien Dictionary <a href="https://leetcode.com/problems/alien-dictionary/" target="_blank" rel="noopener">https://leetcode.com/problems/alien-dictionary/</a></p><p>考点1：如何构建图 考点2：如何存储图 考点3：如何拓扑排序</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>• 能用 BFS 的一定不要用 DFS（除非面试官特别要求） </p><p>• BFS 的两个使用条件 </p><p>​    • 图的遍历（由点及面，层级遍历） </p><p>​    • 简单图最短路径 </p><p>• 是否需要层级遍历 </p><p>​    • size = queue.size() </p><p>• 拓扑排序须掌握 </p><p>• 坐标变换数组 </p><p>​    • deltaX, deltaY </p><p>​    • inBound</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持续更新题目列表&lt;/p&gt;
&lt;h3 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h3&gt;&lt;p&gt;• 什么时候使用 BFS&lt;/p&gt;
&lt;p&gt;• 二叉树上的 BFS &lt;/
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://lavidal.github.io/categories/Algorithm/"/>
    
      <category term="BFS" scheme="https://lavidal.github.io/categories/Algorithm/BFS/"/>
    
    
      <category term="Algorithm" scheme="https://lavidal.github.io/tags/Algorithm/"/>
    
      <category term="BFS" scheme="https://lavidal.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>Monotonic Stack</title>
    <link href="https://lavidal.github.io/2020/08/05/Monotonic-Stack/"/>
    <id>https://lavidal.github.io/2020/08/05/Monotonic-Stack/</id>
    <published>2020-08-05T23:43:52.000Z</published>
    <updated>2020-08-06T04:45:05.584Z</updated>
    
    <content type="html"><![CDATA[<p>持续施工中</p><h3 id="What-is-mono-stack"><a href="#What-is-mono-stack" class="headerlink" title="What is mono stack?"></a><strong>What is mono stack?</strong></h3><p>Monotonic stack is actually a stack. It just uses some ingenious logic <strong>to keep the elements in the stack orderly</strong> (monotone increasing or monotone decreasing) after each new element putting into the stack.</p><p>本质上来说，单调栈就是一个栈。只不过我们在元素加入过程中会进行pop操作来保证栈的单调性。</p><h3 id="Advantage-of-mono-stack"><a href="#Advantage-of-mono-stack" class="headerlink" title="Advantage of mono stack:"></a><strong>Advantage</strong> of mono stack:</h3><p><strong>Linear time complexity</strong>, all elements will only be <strong>put into the stack once</strong>, and once they are out of the stack, they will not come in again.</p><p>使用单调栈往往意味着线性复杂度解决问题，所以如果你发现了题目有着单调栈的pattern，那么就可以尝试使用单调栈优化算法。</p><h3 id="Properties-of-monotonic-stack"><a href="#Properties-of-monotonic-stack" class="headerlink" title="Properties of monotonic stack"></a><strong>Properties of monotonic stack</strong></h3><ol><li><p>The elements in the monotonic stack are monotonic</p></li><li><p>Before elements are added to the stack, all elements that <strong>destroy the monotonicity of the stack</strong> will be <strong>deleted</strong> at the top of the stack</p></li></ol><h3 id="What-kind-of-problem-use-mono-stack"><a href="#What-kind-of-problem-use-mono-stack" class="headerlink" title="What kind of problem use mono stack?"></a><strong>What kind of problem use mono stack?</strong></h3><p>The problems that <strong>cares about</strong> the first element <strong>smaller/greater</strong> than it in the <strong>left/right</strong>.</p><p>很关键的一个问题，什么样的问题能够使用单调栈呢？</p><p>其实我们会发现，单调栈只擅长解决很小的一类问题，它的pattern十分明显：</p><p>那就是如果问题关心<strong>第一个左边/右边比它小/大</strong>的元素，那么就可以使用单调栈。</p><h3 id="Intuition-behind-mono-stack"><a href="#Intuition-behind-mono-stack" class="headerlink" title="Intuition behind mono stack"></a><strong>Intuition behind mono stack</strong></h3><p>Suppose we want to solve this question: </p><p>Given an array, we want to output the <strong>first</strong> element <strong>smaller</strong> than it in the <strong>left</strong> for every number in that array.</p><p>What is the <strong>naive</strong> way? </p><p>Just use two for/while loop to solve it brute forcely.</p><p>But clearly there are many repeating computation. So how to solve it efficiently?</p><p>We store elements before ai into a stack:[a0~ai-1] .</p><p>And each time search through this stack.</p><p><strong>But what if there are a pair aj &gt;= ak(j &lt; k):**</strong></p><p>Then aj will never be chosen<strong>.</strong></p><p><strong>Thus for all j &lt; k, aj &lt; ak. AKA </strong>monotonic**.</p><p>好了，说了半天，我们来举一个例子吧。</p><p>考虑这样一个问题：</p><p>给定一个数组，对于该数组中的每个数字，我们要输出的左边第一个比它小的数字。</p><p>什么是“天真”的方式？</p><p>只需使用两个for / while循环即可强行解决它。</p><p>但是显然有很多重复的计算。 那么如何有效地解决呢？</p><p>就是使用单调栈</p><h3 id="Code-template"><a href="#Code-template" class="headerlink" title="Code template"></a><strong>Code template</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stk = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">    <span class="keyword">while</span> (stk &amp;&amp; check(stk[<span class="number">-1</span>], nums[i])): stk.pop()</span><br><span class="line">    stk.append(nums[i])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num1 &gt;= num2</span><br></pre></td></tr></table></figure><h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a><strong>Extension</strong></h3><p>We just solved smaller/left.</p><p>How about greater or right?</p><p>for i in range(len(nums) - 1, -1, -1):</p><p>return num1 &lt;= num2</p><p>我们可以轻松地扩展单调栈应用到比右边或者第一个比它大的数。</p><h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a><strong>Problems</strong></h3><p>496 Next Greater Element I: <a href="https://leetcode.com/problems/next-greater-element-i/" target="_blank" rel="noopener">https://leetcode.com/problems/next-greater-element-i/</a></p><p>503 Next Greater Element II: <a href="https://leetcode.com/problems/next-greater-element-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/next-greater-element-ii/</a>. </p><p>42 Trapping Rain Water: <a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">https://leetcode.com/problems/trapping-rain-water/</a>. </p><p>84 Largest Rectangle in Histogram: <a href="https://leetcode.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">https://leetcode.com/problems/largest-rectangle-in-histogram/</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ol><li><p><a href="https://github.com/labuladong/fucking-algorithm/blob/master/数据结构系列/单调栈.md" target="_blank" rel="noopener">https://github.com/labuladong/fucking-algorithm/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88.md</a></p></li><li><p><a href="https://blog.csdn.net/liujian20150808/article/details/50752861" target="_blank" rel="noopener">单调栈的介绍以及一些基本性质_多反思，多回顾，要坚持。</a></p></li><li><p><a href="https://blog.csdn.net/qq_17550379/article/details/86519771" target="_blank" rel="noopener">https://blog.csdn.net/qq_17550379/article/details/86519771</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持续施工中&lt;/p&gt;
&lt;h3 id=&quot;What-is-mono-stack&quot;&gt;&lt;a href=&quot;#What-is-mono-stack&quot; class=&quot;headerlink&quot; title=&quot;What is mono stack?&quot;&gt;&lt;/a&gt;&lt;strong&gt;What is mo
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://lavidal.github.io/categories/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://lavidal.github.io/categories/Data-Structure/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://lavidal.github.io/tags/Algorithm/"/>
    
      <category term="Data Structure" scheme="https://lavidal.github.io/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>如何高效阅读论文</title>
    <link href="https://lavidal.github.io/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    <id>https://lavidal.github.io/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/</id>
    <published>2020-07-14T23:23:47.000Z</published>
    <updated>2020-07-14T21:08:57.123Z</updated>
    
    <content type="html"><![CDATA[<p>最近阅读论文十分痛苦，一方面是因为英文文献阅读本就不易，另一方面是我深感论文的阅读技巧这一块还不到位。于是在知乎找了篇回答学习一下：如何快速阅读英文论文并提取重要信息？ - 科研Up主小陈的回答 - 知乎 <a href="https://www.zhihu.com/question/42920162/answer/1288743308。" target="_blank" rel="noopener">https://www.zhihu.com/question/42920162/answer/1288743308。</a></p><p>分为五个部分：</p><p><strong>1. 两分钟就可以完成的文献泛读</strong></p><p><strong>2.可能是最简单的文献精读方法</strong></p><p><strong>3.怦然心动的精读文献收纳整理法</strong></p><p><strong>4.最高效的阅读，是边写边读</strong></p><p><strong>5.要点总结</strong></p><h3 id="1-两分钟就可以完成的文献泛读"><a href="#1-两分钟就可以完成的文献泛读" class="headerlink" title="1. 两分钟就可以完成的文献泛读"></a><strong>1. 两分钟就可以完成的文献泛读</strong></h3><p>阅读文献的流程：搜索→泛读→下载→精读→整理笔记→开始写作输出。</p><p>对于理工科来说，泛读关注这几个部分：一头一尾一图</p><ul><li>摘要</li><li>总结</li><li>图表</li></ul><p>当然，并不需要每篇文章都看这几个部分，摘要是必须要读的，其他的部分可以酌情省略。</p><p>这个阶段只关心一件事：本文对我接下来的研究有没有帮助？</p><hr><h3 id="2-可能是最简单的文献精读方法：摘录-划重点"><a href="#2-可能是最简单的文献精读方法：摘录-划重点" class="headerlink" title="2.可能是最简单的文献精读方法：摘录+划重点"></a><strong>2.可能是最简单的文献精读方法</strong>：摘录+划重点</h3><p>泛读选好了需要进一步了解的文章后，便进入了精读阶段。精读也是有门道的。</p><p>很多时候阅读论文都是读了后面便忘了前面，这样来回反复的阅读，极大打击了我们的积极性，让人沮丧。</p><p>按照答主的分析，这是因为我们没有给自己建立正反馈机制，没有一种明确的“我读完了读懂了”的成就感。为了克服这一问题，提出了一种高效的阅读文献的方法：<strong>就是一边看一边摘录信息</strong>——对于需要通读全文的非综述类的文章，我会用一个<strong>Excel表</strong>来简单记录“这几十篇文献说了什么”。</p><p>一般来说，表头会有：第一作者，年份，题目，方法，论文结果，论文优势，论文缺点，还有一两句话的论文评论。</p><p>其中，方法这一项对于理工科来说可能很多，可以分为几步概括。</p><p>这一两句话的评论就是你看完之后对这篇文章的评价，所以可以口语化表达。</p><p>当你对这个方法熟练了以后，通常对一篇英文文献做一个简单的摘抄不会超过20分钟，快的话10分钟就结束了。</p><img src="/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/excel-for-literature-review.jpg" class=""><p>另外，在摘录的过程中，如果我看到了有用的信息，我还会做的一件事是<strong>划重点</strong>。我一般用两种颜色来划重点，<u><strong>红色</strong></u>表示接下来论文写作/输出时会用到的内容，<u><strong>黄色</strong></u>表示这个信息要配合后续搜索/还没有理解（当后续搜索完成了，会再用<u><strong>黑笔打勾</strong></u>表示完成，如图）。</p><p><strong>通常如果这个内容重点比较模糊，我不确定之后再回看这篇文章这个部分会不会回忆到这个重点是为什么画的，我会在旁边加上一句表示“画重点的目的”</strong>。</p><p>大家其实可以看到我的笔记其实做得很简单，但是这样读文献会比较轻松。天下精读文献，唯快不破，因为读文献本身不是目的，读文献最终的目的就是写文章，所以要让信息为自己所用。不要让“读文献”这件事占用太多时间，读到怀疑人生，反而消耗了太多精力和时间，消磨了自己做学术的热情。</p><p>这种<strong>摘录+划重点</strong>的笔记方式是我自己实践过最快速，最简单方便，也是最有效率的笔记方法，喜欢用其他笔记方法的同学，可以参考一下，或者在评论区留言分享自己的经验和心得。</p><hr><h3 id="3-怦然心动的精读文献收纳整理法"><a href="#3-怦然心动的精读文献收纳整理法" class="headerlink" title="3.怦然心动的精读文献收纳整理法"></a><strong>3.怦然心动的精读文献收纳整理法</strong></h3><p>一篇文献，绝对不是你像上面那样读完就结束的，我认为，无论是本科生，研究生，还是博士生，我推荐大家一定要做好的是<strong>文献的收纳和整理</strong>，这个对于后续的写作和之后对于项目的follow up都至关重要。</p><p>但是我目前发现比找文献更麻烦的，是<strong>去找自己读过有印象也引用了但是因为各种原因</strong>（文献管理软件崩了，自己没做好文献插入等等）而<strong>找不到</strong>的文献（不要问我是怎么知道的）。</p><p>光用文字很难去描述我是怎么做文献的收纳整理的，下图是我收纳已读文献的一个方法。</p><img src="/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/literature-storage.jpg" class=""><p>1）我会把精读文献的pdf下载好放到同一个“子项目文献”文件夹中，阅读时画的重点，可以直接保存；</p><p>2）刚刚我们做好的重要文献的<strong>Excel 摘录</strong>，我们可以把它放在“共同文件”文件夹中，当我们的读过的文献有更新的时候，再将它们记录在案；当子项目增加时，可以用新增工作簿来重新再做摘录；</p><p>3）【文献管理进阶】在下载这些文献的同时，我也会下载它们的RIS文件，然后用Endnote library打开，在Endnote中进行文献的管理。不同的子项目，在Endnote中做一个基本的分组。</p><p>网络上关于Endnote入门的用法的帖子有很多，迟点我写关于系统性综述的文章的时候也再写写。关于如何使用Endnote的视频链接我贴在这里，<a href="https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av35836698/">EndNote X9 快速上手官方视频教程（6分钟）</a>，不懂的大家可以摸索一下（如果是用mendeley的同学，其实方法也差不多）。</p><p>4）对于已经放到了“子项目1-文献”文件夹的文献，用自己看得懂的方法命名,我比较喜爱的方法是：第一作者姓氏+出版年份+关键词1+关键词2（如图）。这样，当我们回去看表格里我们的笔记的时候，也可以很轻松找到我们画过重点的pdf。</p><hr><h3 id="4-最高效的阅读，是边写边读"><a href="#4-最高效的阅读，是边写边读" class="headerlink" title="4.最高效的阅读，是边写边读"></a><strong>4.最高效的阅读，是边写边读</strong></h3><p>其实按照这种方法整理好论文之后，我的建议是，不妨打开你存pdf的文件夹，回头看看自己下载过的这些文献。</p><p>简单地说，就是当<strong>你在写哪个部分的时候，就去看别人的哪个部分是怎么写的</strong>。</p><ul><li>当你写Introduction的时候，就去看那些你觉得Introduction写得好的文章，看看人家的开篇结构，摆的数据来源，引用的文章是哪些，有没有提及哪篇综述；</li><li>写Method和Result的时候，参考那些跟你用相同或者类似方法的文章，看一下人家是怎么样将实验的流程，仪器，数据之类的复杂东西写清楚写明白的；</li><li>写Discussion的时候，参考那些你觉得discussion写得好的文章，看看有没有什么别人讨论过的问题你还没讨论的，然后也看看那些跟你用类似方法的文章，是不是可以将人家的文章的结果跟你的做一个对比，等等。</li><li>写conclusion的时候，就去看那些你觉得conclusion写得好的文章。</li></ul><p>​      好的文章大多数是相似的，而差的文章各有各的差法。当你读得越多，你越能会体会到好的论文应该是怎样的。</p><p> 这时候阅读文献，相当于一个学习写作的过程，除了模仿别人的语法和句式结构，也要模仿别人的推理演绎的逻辑过程，去体会什么是一篇结构优良的文章，在写作过程中，怎么兼顾科学性和可读性（句子之间的关系，文章的起承转合等等）。</p><hr><h3 id="5-要点总结"><a href="#5-要点总结" class="headerlink" title="5.要点总结"></a><strong>5.要点总结</strong></h3><ol><li><p>读文献的流程：搜索→泛读→下载→精读→整理笔记→开始写作</p></li><li><p>先泛读，需要的文章再下载，只看题目和摘要，泛读过程2分钟就可以了</p></li><li><p>精读时，边读边摘抄必要信息，整理到Excel表中</p></li><li><p>除了必要信息外，用红黄两色记重点，红色记有用于写作的内容，黄色记需要后续搜寻的内容</p></li><li><p>画过重点的文献根据内容命名，之后分类放好在文件夹中以免日后找不到笔记；有用文献管理软件的同学，Endnote也要更新。</p></li><li><p>写作时，回到文件夹中，写哪个部分就看参考文献的那个部分是怎么写的，边模仿边学习。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近阅读论文十分痛苦，一方面是因为英文文献阅读本就不易，另一方面是我深感论文的阅读技巧这一块还不到位。于是在知乎找了篇回答学习一下：如何快速阅读英文论文并提取重要信息？ - 科研Up主小陈的回答 - 知乎 &lt;a href=&quot;https://www.zhihu.com/que
      
    
    </summary>
    
    
      <category term="The art of learning" scheme="https://lavidal.github.io/categories/The-art-of-learning/"/>
    
      <category term="Reading" scheme="https://lavidal.github.io/categories/The-art-of-learning/Reading/"/>
    
    
      <category term="The art of learning" scheme="https://lavidal.github.io/tags/The-art-of-learning/"/>
    
      <category term="Reading" scheme="https://lavidal.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>写在前面/Foreword</title>
    <link href="https://lavidal.github.io/2020/07/03/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2-Foreword/"/>
    <id>https://lavidal.github.io/2020/07/03/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2-Foreword/</id>
    <published>2020-07-03T19:40:40.000Z</published>
    <updated>2020-07-03T17:46:18.617Z</updated>
    
    <content type="html"><![CDATA[<p>通过Hexo + Github page部署了自己的第一个博客，接下来会在这里记录学习甚至是其他方面的东西。</p><p>无总结则无进步嘛，之前学过的很多东西，经历过的很多的事，没有见诸文字，也就慢慢地忘记了。这也是部署这个博客很重要的一个原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过Hexo + Github page部署了自己的第一个博客，接下来会在这里记录学习甚至是其他方面的东西。&lt;/p&gt;
&lt;p&gt;无总结则无进步嘛，之前学过的很多东西，经历过的很多的事，没有见诸文字，也就慢慢地忘记了。这也是部署这个博客很重要的一个原因。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="https://lavidal.github.io/categories/%E6%9D%82/"/>
    
      <category term="Other" scheme="https://lavidal.github.io/categories/%E6%9D%82/Other/"/>
    
    
      <category term="杂" scheme="https://lavidal.github.io/tags/%E6%9D%82/"/>
    
      <category term="Other" scheme="https://lavidal.github.io/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lavidal.github.io/2020/06/27/hello-world/"/>
    <id>https://lavidal.github.io/2020/06/27/hello-world/</id>
    <published>2020-06-27T20:38:27.599Z</published>
    <updated>2020-06-27T20:38:27.599Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
