<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Call Me Sensei</title>
  
  <subtitle>A curious boy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-06T04:45:05.584Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Enze Long</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Monotonic Stack</title>
    <link href="http://yoursite.com/2020/08/05/Monotonic-Stack/"/>
    <id>http://yoursite.com/2020/08/05/Monotonic-Stack/</id>
    <published>2020-08-05T20:43:52.000Z</published>
    <updated>2020-08-06T04:45:05.584Z</updated>
    
    <content type="html"><![CDATA[<p>持续施工中</p><h3 id="What-is-mono-stack"><a href="#What-is-mono-stack" class="headerlink" title="What is mono stack?"></a><strong>What is mono stack?</strong></h3><p>Monotonic stack is actually a stack. It just uses some ingenious logic <strong>to keep the elements in the stack orderly</strong> (monotone increasing or monotone decreasing) after each new element putting into the stack.</p><p>本质上来说，单调栈就是一个栈。只不过我们在元素加入过程中会进行pop操作来保证栈的单调性。</p><h3 id="Advantage-of-mono-stack"><a href="#Advantage-of-mono-stack" class="headerlink" title="Advantage of mono stack:"></a><strong>Advantage</strong> of mono stack:</h3><p><strong>Linear time complexity</strong>, all elements will only be <strong>put into the stack once</strong>, and once they are out of the stack, they will not come in again.</p><p>使用单调栈往往意味着线性复杂度解决问题，所以如果你发现了题目有着单调栈的pattern，那么就可以尝试使用单调栈优化算法。</p><h3 id="Properties-of-monotonic-stack"><a href="#Properties-of-monotonic-stack" class="headerlink" title="Properties of monotonic stack"></a><strong>Properties of monotonic stack</strong></h3><ol><li><p>The elements in the monotonic stack are monotonic</p></li><li><p>Before elements are added to the stack, all elements that <strong>destroy the monotonicity of the stack</strong> will be <strong>deleted</strong> at the top of the stack</p></li></ol><h3 id="What-kind-of-problem-use-mono-stack"><a href="#What-kind-of-problem-use-mono-stack" class="headerlink" title="What kind of problem use mono stack?"></a><strong>What kind of problem use mono stack?</strong></h3><p>The problems that <strong>cares about</strong> the first element <strong>smaller/greater</strong> than it in the <strong>left/right</strong>.</p><p>很关键的一个问题，什么样的问题能够使用单调栈呢？</p><p>其实我们会发现，单调栈只擅长解决很小的一类问题，它的pattern十分明显：</p><p>那就是如果问题关心<strong>第一个左边/右边比它小/大</strong>的元素，那么就可以使用单调栈。</p><h3 id="Intuition-behind-mono-stack"><a href="#Intuition-behind-mono-stack" class="headerlink" title="Intuition behind mono stack"></a><strong>Intuition behind mono stack</strong></h3><p>Suppose we want to solve this question: </p><p>Given an array, we want to output the <strong>first</strong> element <strong>smaller</strong> than it in the <strong>left</strong> for every number in that array.</p><p>What is the <strong>naive</strong> way? </p><p>Just use two for/while loop to solve it brute forcely.</p><p>But clearly there are many repeating computation. So how to solve it efficiently?</p><p>We store elements before ai into a stack:[a0~ai-1] .</p><p>And each time search through this stack.</p><p><strong>But what if there are a pair aj &gt;= ak(j &lt; k):**</strong></p><p>Then aj will never be chosen<strong>.</strong></p><p><strong>Thus for all j &lt; k, aj &lt; ak. AKA </strong>monotonic**.</p><p>好了，说了半天，我们来举一个例子吧。</p><p>考虑这样一个问题：</p><p>给定一个数组，对于该数组中的每个数字，我们要输出的左边第一个比它小的数字。</p><p>什么是“天真”的方式？</p><p>只需使用两个for / while循环即可强行解决它。</p><p>但是显然有很多重复的计算。 那么如何有效地解决呢？</p><p>就是使用单调栈</p><h3 id="Code-template"><a href="#Code-template" class="headerlink" title="Code template"></a><strong>Code template</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stk = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">    <span class="keyword">while</span> (stk &amp;&amp; check(stk[<span class="number">-1</span>], nums[i])): stk.pop()</span><br><span class="line">    stk.append(nums[i])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num1 &gt;= num2</span><br></pre></td></tr></table></figure><h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a><strong>Extension</strong></h3><p>We just solved smaller/left.</p><p>How about greater or right?</p><p>for i in range(len(nums) - 1, -1, -1):</p><p>return num1 &lt;= num2</p><p>我们可以轻松地扩展单调栈应用到比右边或者第一个比它大的数。</p><h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a><strong>Problems</strong></h3><p>496 Next Greater Element I: <a href="https://leetcode.com/problems/next-greater-element-i/" target="_blank" rel="noopener">https://leetcode.com/problems/next-greater-element-i/</a></p><p>503 Next Greater Element II: <a href="https://leetcode.com/problems/next-greater-element-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/next-greater-element-ii/</a>. </p><p>42 Trapping Rain Water: <a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">https://leetcode.com/problems/trapping-rain-water/</a>. </p><p>84 Largest Rectangle in Histogram: <a href="https://leetcode.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">https://leetcode.com/problems/largest-rectangle-in-histogram/</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ol><li><p><a href="https://github.com/labuladong/fucking-algorithm/blob/master/数据结构系列/单调栈.md" target="_blank" rel="noopener">https://github.com/labuladong/fucking-algorithm/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88.md</a></p></li><li><p><a href="https://blog.csdn.net/liujian20150808/article/details/50752861" target="_blank" rel="noopener">单调栈的介绍以及一些基本性质_多反思，多回顾，要坚持。</a></p></li><li><p><a href="https://blog.csdn.net/qq_17550379/article/details/86519771" target="_blank" rel="noopener">https://blog.csdn.net/qq_17550379/article/details/86519771</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持续施工中&lt;/p&gt;
&lt;h3 id=&quot;What-is-mono-stack&quot;&gt;&lt;a href=&quot;#What-is-mono-stack&quot; class=&quot;headerlink&quot; title=&quot;What is mono stack?&quot;&gt;&lt;/a&gt;&lt;strong&gt;What is mo
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Data-Structure/Algorithm/"/>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>如何高效阅读论文</title>
    <link href="http://yoursite.com/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    <id>http://yoursite.com/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/</id>
    <published>2020-07-14T20:23:47.000Z</published>
    <updated>2020-07-14T21:08:57.123Z</updated>
    
    <content type="html"><![CDATA[<p>最近阅读论文十分痛苦，一方面是因为英文文献阅读本就不易，另一方面是我深感论文的阅读技巧这一块还不到位。于是在知乎找了篇回答学习一下：如何快速阅读英文论文并提取重要信息？ - 科研Up主小陈的回答 - 知乎 <a href="https://www.zhihu.com/question/42920162/answer/1288743308。" target="_blank" rel="noopener">https://www.zhihu.com/question/42920162/answer/1288743308。</a></p><p>分为五个部分：</p><p><strong>1. 两分钟就可以完成的文献泛读</strong></p><p><strong>2.可能是最简单的文献精读方法</strong></p><p><strong>3.怦然心动的精读文献收纳整理法</strong></p><p><strong>4.最高效的阅读，是边写边读</strong></p><p><strong>5.要点总结</strong></p><h3 id="1-两分钟就可以完成的文献泛读"><a href="#1-两分钟就可以完成的文献泛读" class="headerlink" title="1. 两分钟就可以完成的文献泛读"></a><strong>1. 两分钟就可以完成的文献泛读</strong></h3><p>阅读文献的流程：搜索→泛读→下载→精读→整理笔记→开始写作输出。</p><p>对于理工科来说，泛读关注这几个部分：一头一尾一图</p><ul><li>摘要</li><li>总结</li><li>图表</li></ul><p>当然，并不需要每篇文章都看这几个部分，摘要是必须要读的，其他的部分可以酌情省略。</p><p>这个阶段只关心一件事：本文对我接下来的研究有没有帮助？</p><hr><h3 id="2-可能是最简单的文献精读方法：摘录-划重点"><a href="#2-可能是最简单的文献精读方法：摘录-划重点" class="headerlink" title="2.可能是最简单的文献精读方法：摘录+划重点"></a><strong>2.可能是最简单的文献精读方法</strong>：摘录+划重点</h3><p>泛读选好了需要进一步了解的文章后，便进入了精读阶段。精读也是有门道的。</p><p>很多时候阅读论文都是读了后面便忘了前面，这样来回反复的阅读，极大打击了我们的积极性，让人沮丧。</p><p>按照答主的分析，这是因为我们没有给自己建立正反馈机制，没有一种明确的“我读完了读懂了”的成就感。为了克服这一问题，提出了一种高效的阅读文献的方法：<strong>就是一边看一边摘录信息</strong>——对于需要通读全文的非综述类的文章，我会用一个<strong>Excel表</strong>来简单记录“这几十篇文献说了什么”。</p><p>一般来说，表头会有：第一作者，年份，题目，方法，论文结果，论文优势，论文缺点，还有一两句话的论文评论。</p><p>其中，方法这一项对于理工科来说可能很多，可以分为几步概括。</p><p>这一两句话的评论就是你看完之后对这篇文章的评价，所以可以口语化表达。</p><p>当你对这个方法熟练了以后，通常对一篇英文文献做一个简单的摘抄不会超过20分钟，快的话10分钟就结束了。</p><img src="/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/excel-for-literature-review.jpg" class=""><p>另外，在摘录的过程中，如果我看到了有用的信息，我还会做的一件事是<strong>划重点</strong>。我一般用两种颜色来划重点，<u><strong>红色</strong></u>表示接下来论文写作/输出时会用到的内容，<u><strong>黄色</strong></u>表示这个信息要配合后续搜索/还没有理解（当后续搜索完成了，会再用<u><strong>黑笔打勾</strong></u>表示完成，如图）。</p><p><strong>通常如果这个内容重点比较模糊，我不确定之后再回看这篇文章这个部分会不会回忆到这个重点是为什么画的，我会在旁边加上一句表示“画重点的目的”</strong>。</p><p>大家其实可以看到我的笔记其实做得很简单，但是这样读文献会比较轻松。天下精读文献，唯快不破，因为读文献本身不是目的，读文献最终的目的就是写文章，所以要让信息为自己所用。不要让“读文献”这件事占用太多时间，读到怀疑人生，反而消耗了太多精力和时间，消磨了自己做学术的热情。</p><p>这种<strong>摘录+划重点</strong>的笔记方式是我自己实践过最快速，最简单方便，也是最有效率的笔记方法，喜欢用其他笔记方法的同学，可以参考一下，或者在评论区留言分享自己的经验和心得。</p><hr><h3 id="3-怦然心动的精读文献收纳整理法"><a href="#3-怦然心动的精读文献收纳整理法" class="headerlink" title="3.怦然心动的精读文献收纳整理法"></a><strong>3.怦然心动的精读文献收纳整理法</strong></h3><p>一篇文献，绝对不是你像上面那样读完就结束的，我认为，无论是本科生，研究生，还是博士生，我推荐大家一定要做好的是<strong>文献的收纳和整理</strong>，这个对于后续的写作和之后对于项目的follow up都至关重要。</p><p>但是我目前发现比找文献更麻烦的，是<strong>去找自己读过有印象也引用了但是因为各种原因</strong>（文献管理软件崩了，自己没做好文献插入等等）而<strong>找不到</strong>的文献（不要问我是怎么知道的）。</p><p>光用文字很难去描述我是怎么做文献的收纳整理的，下图是我收纳已读文献的一个方法。</p><img src="/2020/07/14/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87/literature-storage.jpg" class=""><p>1）我会把精读文献的pdf下载好放到同一个“子项目文献”文件夹中，阅读时画的重点，可以直接保存；</p><p>2）刚刚我们做好的重要文献的<strong>Excel 摘录</strong>，我们可以把它放在“共同文件”文件夹中，当我们的读过的文献有更新的时候，再将它们记录在案；当子项目增加时，可以用新增工作簿来重新再做摘录；</p><p>3）【文献管理进阶】在下载这些文献的同时，我也会下载它们的RIS文件，然后用Endnote library打开，在Endnote中进行文献的管理。不同的子项目，在Endnote中做一个基本的分组。</p><p>网络上关于Endnote入门的用法的帖子有很多，迟点我写关于系统性综述的文章的时候也再写写。关于如何使用Endnote的视频链接我贴在这里，<a href="https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av35836698/">EndNote X9 快速上手官方视频教程（6分钟）</a>，不懂的大家可以摸索一下（如果是用mendeley的同学，其实方法也差不多）。</p><p>4）对于已经放到了“子项目1-文献”文件夹的文献，用自己看得懂的方法命名,我比较喜爱的方法是：第一作者姓氏+出版年份+关键词1+关键词2（如图）。这样，当我们回去看表格里我们的笔记的时候，也可以很轻松找到我们画过重点的pdf。</p><hr><h3 id="4-最高效的阅读，是边写边读"><a href="#4-最高效的阅读，是边写边读" class="headerlink" title="4.最高效的阅读，是边写边读"></a><strong>4.最高效的阅读，是边写边读</strong></h3><p>其实按照这种方法整理好论文之后，我的建议是，不妨打开你存pdf的文件夹，回头看看自己下载过的这些文献。</p><p>简单地说，就是当<strong>你在写哪个部分的时候，就去看别人的哪个部分是怎么写的</strong>。</p><ul><li>当你写Introduction的时候，就去看那些你觉得Introduction写得好的文章，看看人家的开篇结构，摆的数据来源，引用的文章是哪些，有没有提及哪篇综述；</li><li>写Method和Result的时候，参考那些跟你用相同或者类似方法的文章，看一下人家是怎么样将实验的流程，仪器，数据之类的复杂东西写清楚写明白的；</li><li>写Discussion的时候，参考那些你觉得discussion写得好的文章，看看有没有什么别人讨论过的问题你还没讨论的，然后也看看那些跟你用类似方法的文章，是不是可以将人家的文章的结果跟你的做一个对比，等等。</li><li>写conclusion的时候，就去看那些你觉得conclusion写得好的文章。</li></ul><p>​      好的文章大多数是相似的，而差的文章各有各的差法。当你读得越多，你越能会体会到好的论文应该是怎样的。</p><p> 这时候阅读文献，相当于一个学习写作的过程，除了模仿别人的语法和句式结构，也要模仿别人的推理演绎的逻辑过程，去体会什么是一篇结构优良的文章，在写作过程中，怎么兼顾科学性和可读性（句子之间的关系，文章的起承转合等等）。</p><hr><h3 id="5-要点总结"><a href="#5-要点总结" class="headerlink" title="5.要点总结"></a><strong>5.要点总结</strong></h3><ol><li><p>读文献的流程：搜索→泛读→下载→精读→整理笔记→开始写作</p></li><li><p>先泛读，需要的文章再下载，只看题目和摘要，泛读过程2分钟就可以了</p></li><li><p>精读时，边读边摘抄必要信息，整理到Excel表中</p></li><li><p>除了必要信息外，用红黄两色记重点，红色记有用于写作的内容，黄色记需要后续搜寻的内容</p></li><li><p>画过重点的文献根据内容命名，之后分类放好在文件夹中以免日后找不到笔记；有用文献管理软件的同学，Endnote也要更新。</p></li><li><p>写作时，回到文件夹中，写哪个部分就看参考文献的那个部分是怎么写的，边模仿边学习。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近阅读论文十分痛苦，一方面是因为英文文献阅读本就不易，另一方面是我深感论文的阅读技巧这一块还不到位。于是在知乎找了篇回答学习一下：如何快速阅读英文论文并提取重要信息？ - 科研Up主小陈的回答 - 知乎 &lt;a href=&quot;https://www.zhihu.com/que
      
    
    </summary>
    
    
      <category term="The art of learning" scheme="http://yoursite.com/categories/The-art-of-learning/"/>
    
      <category term="Reading" scheme="http://yoursite.com/categories/The-art-of-learning/Reading/"/>
    
    
      <category term="The art of learning" scheme="http://yoursite.com/tags/The-art-of-learning/"/>
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>写在前面/Foreword</title>
    <link href="http://yoursite.com/2020/07/03/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2-Foreword/"/>
    <id>http://yoursite.com/2020/07/03/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2-Foreword/</id>
    <published>2020-07-03T16:40:40.000Z</published>
    <updated>2020-07-03T17:46:18.617Z</updated>
    
    <content type="html"><![CDATA[<p>通过Hexo + Github page部署了自己的第一个博客，接下来会在这里记录学习甚至是其他方面的东西。</p><p>无总结则无进步嘛，之前学过的很多东西，经历过的很多的事，没有见诸文字，也就慢慢地忘记了。这也是部署这个博客很重要的一个原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过Hexo + Github page部署了自己的第一个博客，接下来会在这里记录学习甚至是其他方面的东西。&lt;/p&gt;
&lt;p&gt;无总结则无进步嘛，之前学过的很多东西，经历过的很多的事，没有见诸文字，也就慢慢地忘记了。这也是部署这个博客很重要的一个原因。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://yoursite.com/categories/%E6%9D%82/"/>
    
      <category term="Other" scheme="http://yoursite.com/categories/%E6%9D%82/Other/"/>
    
    
      <category term="杂" scheme="http://yoursite.com/tags/%E6%9D%82/"/>
    
      <category term="Other" scheme="http://yoursite.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/27/hello-world/"/>
    <id>http://yoursite.com/2020/06/27/hello-world/</id>
    <published>2020-06-27T20:38:27.599Z</published>
    <updated>2020-06-27T20:38:27.599Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
